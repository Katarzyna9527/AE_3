function [net]= train_net(train_set,labels,hidden_neurons_count)
    %Opis: funkcja tworz¹ca i ucz¹ca sieæ neuronow¹
    %Parametry:
    %   train_set: zbiór ucz¹cy - kolejne punkty w kolejnych wierszach
    %   labels:    etykiety punktów - {-1,1}
    %   hidden_neurons_count: liczba neuronów w warstwie ukrytej
    %Wartoœæ zwracana:
    %   net - obiekt reprezentuj¹cy sieæ neuronow¹

    %inicjalizacja obiektu reprezentuj¹cego sieæ neuronow¹
    %funkcja aktywacji: neuronów z warstwy ukrytej - tangens hiperboliczny,
    %                   neuronu wyjœciowego - liniowa
    %funkcja ucz¹ca: gradient descent backpropagation - propagacja wsteczna
    %                   b³êdu    
    net=newff(train_set',labels',hidden_neurons_count,...
              {'tansig', 'purelin'},'traingd');
          
    rand('state',sum(100*clock));           %inicjalizacja generatora liczb 
                                            %pseudolosowych
    %inicjalizacja wag sieci
     net.IW{1,1} = random('Uniform',-0.15,0.15,4,1); 
     net.LW{2,1} = random('Uniform',-0.15,0.15,1,4);
    net.b{1,1} = random('Uniform',-0.15,0.15,4,1);
    net.b{2,1} = 0;
    net.trainFcn = 'trainlm';
    net.trainParam.goal = 0.000001;             %warunek stopu - poziom b³êdu
    net.trainParam.epochs = 200;            %maksymalna liczba epok
    net.trainParam.showWindow = false;      %nie pokazywaæ okna z wykresami
   
    net=train(net,train_set',labels');      %uczenie sieci
    